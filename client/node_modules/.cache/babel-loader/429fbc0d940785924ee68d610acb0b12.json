{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _helpers = require('../utils/helpers');\n\nvar _SwitchBase = require('../internal/SwitchBase');\n\nvar _SwitchBase2 = _interopRequireDefault(_SwitchBase);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar styles = exports.styles = function styles(theme) {\n  return {\n    root: {\n      display: 'inline-flex',\n      width: 62,\n      position: 'relative',\n      flexShrink: 0,\n      // For correct alignment with the text.\n      verticalAlign: 'middle'\n    },\n    icon: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n    iconChecked: {\n      boxShadow: theme.shadows[2]\n    },\n    switchBase: {\n      zIndex: 1,\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    checked: {\n      transform: 'translateX(14px)',\n      '& + $bar': {\n        opacity: 0.5\n      }\n    },\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '& + $bar': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '& + $bar': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n    disabled: {\n      '& + $bar': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      },\n      '& $icon': {\n        boxShadow: theme.shadows[1]\n      },\n      '&$switchBase': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        '& + $bar': {\n          backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n        }\n      }\n    },\n    bar: {\n      borderRadius: 7,\n      display: 'block',\n      position: 'absolute',\n      width: 34,\n      height: 14,\n      top: '50%',\n      left: '50%',\n      marginTop: -7,\n      marginLeft: -17,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\n\nfunction Switch(props) {\n  var classes = props.classes,\n      className = props.className,\n      color = props.color,\n      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'color']);\n  return _react2.default.createElement('span', {\n    className: (0, _classnames2.default)(classes.root, className)\n  }, _react2.default.createElement(_SwitchBase2.default, (0, _extends3.default)({\n    icon: _react2.default.createElement('span', {\n      className: classes.icon\n    }),\n    classes: {\n      root: (0, _classnames2.default)(classes.switchBase, classes['color' + (0, _helpers.capitalize)(color)]),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    checkedIcon: _react2.default.createElement('span', {\n      className: (0, _classnames2.default)(classes.icon, classes.iconChecked)\n    })\n  }, other)), _react2.default.createElement('span', {\n    className: classes.bar\n  }));\n}\n\nSwitch.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: _propTypes2.default.node,\n\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: _propTypes2.default.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: _propTypes2.default.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: _propTypes2.default.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: _propTypes2.default.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes2.default.string,\n\n  /**\n   * Properties applied to the `input` element.\n   */\n  inputProps: _propTypes2.default.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: _propTypes2.default.string,\n\n  /**\n   * The value of the component.\n   */\n  value: _propTypes2.default.string\n} : {};\nSwitch.defaultProps = {\n  color: 'secondary'\n};\nexports.default = (0, _withStyles2.default)(styles, {\n  name: 'MuiSwitch'\n})(Switch);","map":null,"metadata":{},"sourceType":"script"}