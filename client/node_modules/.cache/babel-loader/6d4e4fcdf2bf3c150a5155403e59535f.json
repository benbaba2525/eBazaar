{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _style = require('dom-helpers/style');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _ownerDocument = require('dom-helpers/ownerDocument');\n\nvar _ownerDocument2 = _interopRequireDefault(_ownerDocument);\n\nvar _scrollbarSize = require('dom-helpers/util/scrollbarSize');\n\nvar _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);\n\nvar _isOverflowing = require('./isOverflowing');\n\nvar _isOverflowing2 = _interopRequireDefault(_isOverflowing);\n\nvar _manageAriaHidden = require('./manageAriaHidden');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction findIndexOf(data, callback) {\n  var idx = -1;\n  data.some(function (item, index) {\n    if (callback(item)) {\n      idx = index;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n\nfunction findContainer(data, modal) {\n  return findIndexOf(data, function (item) {\n    return item.modals.indexOf(modal) !== -1;\n  });\n}\n\nfunction getPaddingRight(node) {\n  return parseInt((0, _style2.default)(node, 'paddingRight') || 0, 10);\n}\n\nfunction setContainerStyle(data, container) {\n  var style = {\n    overflow: 'hidden'\n  }; // We are only interested in the actual `style` here because we will override it.\n\n  data.style = {\n    overflow: container.style.overflow,\n    paddingRight: container.style.paddingRight\n  };\n\n  if (data.overflowing) {\n    var scrollbarSize = (0, _scrollbarSize2.default)(); // Use computed style, here to get the real padding to add our scrollbar width.\n\n    style.paddingRight = getPaddingRight(container) + scrollbarSize + 'px'; // .mui-fixed is a global helper.\n\n    var fixedNodes = (0, _ownerDocument2.default)(container).querySelectorAll('.mui-fixed');\n\n    for (var i = 0; i < fixedNodes.length; i += 1) {\n      var paddingRight = getPaddingRight(fixedNodes[i]);\n      data.prevPaddings.push(paddingRight);\n      fixedNodes[i].style.paddingRight = paddingRight + scrollbarSize + 'px';\n    }\n  }\n\n  (0, _keys2.default)(style).forEach(function (key) {\n    container.style[key] = style[key];\n  });\n}\n\nfunction removeContainerStyle(data, container) {\n  (0, _keys2.default)(data.style).forEach(function (key) {\n    container.style[key] = data.style[key];\n  });\n  var fixedNodes = (0, _ownerDocument2.default)(container).querySelectorAll('.mui-fixed');\n\n  for (var i = 0; i < fixedNodes.length; i += 1) {\n    fixedNodes[i].style.paddingRight = data.prevPaddings[i] + 'px';\n  }\n}\n/**\n * @ignore - do not document.\n *\n * Proper state managment for containers and the modals in those containers.\n * Simplified, but inspired by react-overlay's ModalManager class\n * Used by the Modal to ensure proper styling of containers.\n */\n\n\nvar ModalManager = function () {\n  function ModalManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$hideSiblingNodes = _ref.hideSiblingNodes,\n        hideSiblingNodes = _ref$hideSiblingNodes === undefined ? true : _ref$hideSiblingNodes,\n        _ref$handleContainerO = _ref.handleContainerOverflow,\n        handleContainerOverflow = _ref$handleContainerO === undefined ? true : _ref$handleContainerO;\n\n    (0, _classCallCheck3.default)(this, ModalManager);\n    this.hideSiblingNodes = hideSiblingNodes;\n    this.handleContainerOverflow = handleContainerOverflow; // this.modals[modalIdx] = modal\n\n    this.modals = []; // this.containers[containerIdx] = container\n\n    this.containers = []; // this.data[containerIdx] = {\n    //   modals: [],\n    // }\n\n    this.data = [];\n  }\n\n  (0, _createClass3.default)(ModalManager, [{\n    key: 'add',\n    value: function add(modal, container) {\n      var modalIdx = this.modals.indexOf(modal);\n      var containerIdx = this.containers.indexOf(container);\n\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n\n      if (this.hideSiblingNodes) {\n        (0, _manageAriaHidden.hideSiblings)(container, modal.mountNode);\n      }\n\n      if (containerIdx !== -1) {\n        this.data[containerIdx].modals.push(modal);\n        return modalIdx;\n      }\n\n      var data = {\n        modals: [modal],\n        overflowing: (0, _isOverflowing2.default)(container),\n        prevPaddings: []\n      };\n\n      if (this.handleContainerOverflow) {\n        setContainerStyle(data, container);\n      }\n\n      this.containers.push(container);\n      this.data.push(data);\n      return modalIdx;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx === -1) {\n        return modalIdx;\n      }\n\n      var containerIdx = findContainer(this.data, modal);\n      var data = this.data[containerIdx];\n      var container = this.containers[containerIdx];\n      data.modals.splice(data.modals.indexOf(modal), 1);\n      this.modals.splice(modalIdx, 1); // If that was the last modal in a container, clean up the container.\n\n      if (data.modals.length === 0) {\n        if (this.handleContainerOverflow) {\n          removeContainerStyle(data, container);\n        }\n\n        if (this.hideSiblingNodes) {\n          (0, _manageAriaHidden.showSiblings)(container, modal.mountNode);\n        }\n\n        this.containers.splice(containerIdx, 1);\n        this.data.splice(containerIdx, 1);\n      } else if (this.hideSiblingNodes) {\n        // Otherwise make sure the next top modal is visible to a SR.\n        (0, _manageAriaHidden.ariaHidden)(false, data.modals[data.modals.length - 1].mountNode);\n      }\n\n      return modalIdx;\n    }\n  }, {\n    key: 'isTopModal',\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n  return ModalManager;\n}();\n\nexports.default = ModalManager;","map":null,"metadata":{},"sourceType":"script"}