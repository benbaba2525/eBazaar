{"ast":null,"code":"const create = user => {\n  return fetch('/api/users/', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\nconst list = () => {\n  return fetch('/api/users/', {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\nconst read = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\nconst update = (params, credentials, user) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst remove = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst stripeUpdate = (params, credentials, auth_code) => {\n  return fetch('/api/stripe_auth/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({\n      stripe: auth_code\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nexport { create, list, read, update, remove, stripeUpdate };","map":{"version":3,"sources":["/Users/ben/Desktop/Class-HW/eBazaar/client/src/user/api-user.js"],"names":["create","user","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err","console","log","list","read","params","credentials","userId","t","update","remove","stripeUpdate","auth_code","stripe"],"mappings":"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","sourcesContent":["const create = (user) => {\n  return fetch('/api/users/', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n\nconst list = () => {\n  return fetch('/api/users/', {\n    method: 'GET',\n  }).then(response => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n\nconst read = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => console.log(err))\n}\n\nconst update = (params, credentials, user) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify(user)\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n\nconst remove = (params, credentials) => {\n  return fetch('/api/users/' + params.userId, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    }\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n\nconst stripeUpdate = (params, credentials, auth_code) => {\n  return fetch('/api/stripe_auth/' + params.userId, {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + credentials.t\n    },\n    body: JSON.stringify({ stripe: auth_code })\n  }).then((response) => {\n    return response.json()\n  }).catch((err) => {\n    console.log(err)\n  })\n}\n\nexport { create, list, read, update, remove, stripeUpdate }"]},"metadata":{},"sourceType":"module"}