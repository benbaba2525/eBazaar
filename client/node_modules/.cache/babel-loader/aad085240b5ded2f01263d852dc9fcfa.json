{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _activeElement = require('dom-helpers/activeElement');\n\nvar _activeElement2 = _interopRequireDefault(_activeElement);\n\nvar _contains = require('dom-helpers/query/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _inDOM = require('dom-helpers/util/inDOM');\n\nvar _inDOM2 = _interopRequireDefault(_inDOM);\n\nvar _ownerDocument = require('dom-helpers/ownerDocument');\n\nvar _ownerDocument2 = _interopRequireDefault(_ownerDocument);\n\nvar _RootRef = require('../internal/RootRef');\n\nvar _RootRef2 = _interopRequireDefault(_RootRef);\n\nvar _Portal = require('../Portal');\n\nvar _Portal2 = _interopRequireDefault(_Portal);\n\nvar _helpers = require('../utils/helpers');\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _ModalManager = require('./ModalManager');\n\nvar _ModalManager2 = _interopRequireDefault(_ModalManager);\n\nvar _Backdrop = require('./Backdrop');\n\nvar _Backdrop2 = _interopRequireDefault(_Backdrop);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getContainer(container, defaultContainer) {\n  container = typeof container === 'function' ? container() : container;\n  return _reactDom2.default.findDOMNode(container) || defaultContainer;\n} // @inheritedComponent Portal\n\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n}\n\nvar styles = exports.styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n      position: 'fixed',\n      zIndex: theme.zIndex.modal,\n      top: 0,\n      left: 0\n    },\n    hidden: {\n      visibility: 'hidden'\n    }\n  };\n};\n\nvar Modal = function (_React$Component) {\n  (0, _inherits3.default)(Modal, _React$Component);\n  (0, _createClass3.default)(Modal, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps) {\n      if (nextProps.open) {\n        return {\n          exited: false\n        };\n      } else if (!getHasTransition(nextProps)) {\n        // Otherwise let handleExited take care of marking exited.\n        return {\n          exited: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function Modal(props, context) {\n    (0, _classCallCheck3.default)(this, Modal);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Modal.__proto__ || (0, _getPrototypeOf2.default)(Modal)).call(this, props, context));\n\n    _this.dialogElement = null;\n    _this.mounted = false;\n    _this.mountNode = null;\n\n    _this.handleRendered = function () {\n      _this.autoFocus();\n\n      if (_this.props.onRendered) {\n        _this.props.onRendered();\n      }\n    };\n\n    _this.handleOpen = function () {\n      var doc = (0, _ownerDocument2.default)(_this.mountNode);\n      var container = getContainer(_this.props.container, doc.body);\n\n      _this.props.manager.add(_this, container);\n\n      doc.addEventListener('keydown', _this.handleDocumentKeyDown);\n      doc.addEventListener('focus', _this.enforceFocus, true);\n    };\n\n    _this.handleClose = function () {\n      _this.props.manager.remove(_this);\n\n      var doc = (0, _ownerDocument2.default)(_this.mountNode);\n      doc.removeEventListener('keydown', _this.handleDocumentKeyDown);\n      doc.removeEventListener('focus', _this.enforceFocus);\n\n      _this.restoreLastFocus();\n    };\n\n    _this.handleExited = function () {\n      _this.setState({\n        exited: true\n      });\n\n      _this.handleClose();\n    };\n\n    _this.handleBackdropClick = function (event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      if (_this.props.onBackdropClick) {\n        _this.props.onBackdropClick(event);\n      }\n\n      if (!_this.props.disableBackdropClick && _this.props.onClose) {\n        _this.props.onClose(event, 'backdropClick');\n      }\n    };\n\n    _this.handleDocumentKeyDown = function (event) {\n      if (!_this.isTopModal() || (0, _keycode2.default)(event) !== 'esc') {\n        return;\n      }\n\n      if (_this.props.onEscapeKeyDown) {\n        _this.props.onEscapeKeyDown(event);\n      }\n\n      if (!_this.props.disableEscapeKeyDown && _this.props.onClose) {\n        _this.props.onClose(event, 'escapeKeyDown');\n      }\n    };\n\n    _this.checkForFocus = function () {\n      if (_inDOM2.default) {\n        _this.lastFocus = (0, _activeElement2.default)();\n      }\n    };\n\n    _this.enforceFocus = function () {\n      if (_this.props.disableEnforceFocus || !_this.mounted || !_this.isTopModal()) {\n        return;\n      }\n\n      var currentActiveElement = (0, _activeElement2.default)((0, _ownerDocument2.default)(_this.mountNode));\n\n      if (_this.dialogElement && !(0, _contains2.default)(_this.dialogElement, currentActiveElement)) {\n        _this.dialogElement.focus();\n      }\n    };\n\n    _this.state = {\n      exited: !_this.props.open\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Modal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.mounted = true;\n\n      if (this.props.open) {\n        this.handleOpen();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.open && this.props.open) {\n        this.checkForFocus();\n      }\n\n      if (prevProps.open && !this.props.open && !getHasTransition(this.props)) {\n        // Otherwise handleExited will call this.\n        this.handleClose();\n      } else if (!prevProps.open && this.props.open) {\n        this.handleOpen();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mounted = false;\n\n      if (this.props.open || getHasTransition(this.props) && !this.state.exited) {\n        this.handleClose();\n      }\n    }\n  }, {\n    key: 'autoFocus',\n    value: function autoFocus() {\n      if (this.props.disableAutoFocus) {\n        return;\n      }\n\n      var currentActiveElement = (0, _activeElement2.default)((0, _ownerDocument2.default)(this.mountNode));\n\n      if (this.dialogElement && !(0, _contains2.default)(this.dialogElement, currentActiveElement)) {\n        this.lastFocus = currentActiveElement;\n\n        if (!this.dialogElement.hasAttribute('tabIndex')) {\n          process.env.NODE_ENV !== \"production\" ? (0, _warning2.default)(false, ['Material-UI: the modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n')) : void 0;\n          this.dialogElement.setAttribute('tabIndex', -1);\n        }\n\n        this.dialogElement.focus();\n      }\n    }\n  }, {\n    key: 'restoreLastFocus',\n    value: function restoreLastFocus() {\n      if (this.props.disableRestoreFocus) {\n        return;\n      }\n\n      if (this.lastFocus) {\n        this.lastFocus.focus();\n        this.lastFocus = null;\n      }\n    }\n  }, {\n    key: 'isTopModal',\n    value: function isTopModal() {\n      return this.props.manager.isTopModal(this);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          BackdropComponent = _props.BackdropComponent,\n          BackdropProps = _props.BackdropProps,\n          children = _props.children,\n          classes = _props.classes,\n          className = _props.className,\n          container = _props.container,\n          disableAutoFocus = _props.disableAutoFocus,\n          disableBackdropClick = _props.disableBackdropClick,\n          disableEnforceFocus = _props.disableEnforceFocus,\n          disableEscapeKeyDown = _props.disableEscapeKeyDown,\n          disableRestoreFocus = _props.disableRestoreFocus,\n          hideBackdrop = _props.hideBackdrop,\n          keepMounted = _props.keepMounted,\n          onBackdropClick = _props.onBackdropClick,\n          onClose = _props.onClose,\n          onEscapeKeyDown = _props.onEscapeKeyDown,\n          onRendered = _props.onRendered,\n          open = _props.open,\n          manager = _props.manager,\n          other = (0, _objectWithoutProperties3.default)(_props, ['BackdropComponent', 'BackdropProps', 'children', 'classes', 'className', 'container', 'disableAutoFocus', 'disableBackdropClick', 'disableEnforceFocus', 'disableEscapeKeyDown', 'disableRestoreFocus', 'hideBackdrop', 'keepMounted', 'onBackdropClick', 'onClose', 'onEscapeKeyDown', 'onRendered', 'open', 'manager']);\n      var exited = this.state.exited;\n      var hasTransition = getHasTransition(this.props);\n      var childProps = {};\n\n      if (!keepMounted && !open && (!hasTransition || exited)) {\n        return null;\n      } // It's a Transition like component\n\n\n      if (hasTransition) {\n        childProps.onExited = (0, _helpers.createChainedFunction)(this.handleExited, children.props.onExited);\n      }\n\n      if (children.props.role === undefined) {\n        childProps.role = children.props.role || 'document';\n      }\n\n      if (children.props.tabIndex === undefined) {\n        childProps.tabIndex = children.props.tabIndex || '-1';\n      }\n\n      return _react2.default.createElement(_Portal2.default, {\n        ref: function ref(node) {\n          _this2.mountNode = node ? node.getMountNode() : node;\n        },\n        container: container,\n        onRendered: this.handleRendered\n      }, _react2.default.createElement('div', (0, _extends3.default)({\n        className: (0, _classnames2.default)(classes.root, className, (0, _defineProperty3.default)({}, classes.hidden, exited))\n      }, other), hideBackdrop ? null : _react2.default.createElement(BackdropComponent, (0, _extends3.default)({\n        open: open,\n        onClick: this.handleBackdropClick\n      }, BackdropProps)), _react2.default.createElement(_RootRef2.default, {\n        rootRef: function rootRef(node) {\n          _this2.dialogElement = node;\n        }\n      }, _react2.default.cloneElement(children, childProps))));\n    }\n  }]);\n  return Modal;\n}(_react2.default.Component);\n\nModal.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A backdrop component. Useful for custom backdrop rendering.\n   */\n  BackdropComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n\n  /**\n   * Properties applied to the `Backdrop` element.\n   */\n  BackdropProps: _propTypes2.default.object,\n\n  /**\n   * A single child content element.\n   */\n  children: _propTypes2.default.element,\n\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   */\n  container: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: _propTypes2.default.bool,\n\n  /**\n   * If `true`, clicking the backdrop will not fire any callback.\n   */\n  disableBackdropClick: _propTypes2.default.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: _propTypes2.default.bool,\n\n  /**\n   * If `true`, hitting escape will not fire any callback.\n   */\n  disableEscapeKeyDown: _propTypes2.default.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: _propTypes2.default.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: _propTypes2.default.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This property can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: _propTypes2.default.bool,\n\n  /**\n   * A modal manager used to track and manage the state of open\n   * Modals. Useful when customizing how modals interact within a container.\n   */\n  manager: _propTypes2.default.object,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`\n   */\n  onClose: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: _propTypes2.default.func,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` property took effect.\n   */\n  onRendered: _propTypes2.default.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: _propTypes2.default.bool.isRequired\n} : {};\nModal.defaultProps = {\n  disableAutoFocus: false,\n  disableBackdropClick: false,\n  disableEnforceFocus: false,\n  disableEscapeKeyDown: false,\n  disableRestoreFocus: false,\n  hideBackdrop: false,\n  keepMounted: false,\n  // Modals don't open on the server so this won't conflict with concurrent requests.\n  manager: new _ModalManager2.default(),\n  BackdropComponent: _Backdrop2.default\n};\nexports.default = (0, _withStyles2.default)(styles, {\n  flip: false,\n  name: 'MuiModal'\n})((0, _reactLifecyclesCompat.polyfill)(Modal));","map":null,"metadata":{},"sourceType":"script"}