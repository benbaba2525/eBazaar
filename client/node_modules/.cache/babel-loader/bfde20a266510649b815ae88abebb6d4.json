{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _withStyles = require('../styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _Typography = require('../Typography');\n\nvar _Typography2 = _interopRequireDefault(_Typography);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar styles = exports.styles = function styles(theme) {\n  return {\n    root: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      // For correct alignment with the text.\n      verticalAlign: 'middle',\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      marginLeft: -14,\n      marginRight: theme.spacing.unit * 2,\n      // used for row presentation of radio/checkbox\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n    disabled: {},\n    label: {\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      }\n    }\n  };\n};\n/**\n * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n */\n\n/* eslint-disable jsx-a11y/label-has-for */\n\n\nfunction FormControlLabel(props, context) {\n  var checked = props.checked,\n      classes = props.classes,\n      classNameProp = props.className,\n      control = props.control,\n      disabledProp = props.disabled,\n      inputRef = props.inputRef,\n      label = props.label,\n      name = props.name,\n      onChange = props.onChange,\n      value = props.value,\n      other = (0, _objectWithoutProperties3.default)(props, ['checked', 'classes', 'className', 'control', 'disabled', 'inputRef', 'label', 'name', 'onChange', 'value']);\n  var muiFormControl = context.muiFormControl;\n  var disabled = disabledProp;\n\n  if (typeof control.props.disabled !== 'undefined') {\n    if (typeof disabled === 'undefined') {\n      disabled = control.props.disabled;\n    }\n  }\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  var className = (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp);\n  return _react2.default.createElement('label', (0, _extends3.default)({\n    className: className\n  }, other), _react2.default.cloneElement(control, {\n    disabled: disabled,\n    checked: typeof control.props.checked === 'undefined' ? checked : control.props.checked,\n    name: control.props.name || name,\n    onChange: control.props.onChange || onChange,\n    value: control.props.value || value,\n    inputRef: control.props.inputRef || inputRef\n  }), _react2.default.createElement(_Typography2.default, {\n    component: 'span',\n    className: (0, _classnames2.default)(classes.label, (0, _defineProperty3.default)({}, classes.disabled, disabled))\n  }, label));\n}\n\nFormControlLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),\n\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes: _propTypes2.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes2.default.string,\n\n  /**\n   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: _propTypes2.default.element,\n\n  /**\n   * If `true`, the control will be disabled.\n   */\n  disabled: _propTypes2.default.bool,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes2.default.func,\n\n  /**\n   * The text to be used in an enclosing label element.\n   */\n  label: _propTypes2.default.node,\n\n  /*\n   * @ignore\n   */\n  name: _propTypes2.default.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: _propTypes2.default.func,\n\n  /**\n   * The value of the component.\n   */\n  value: _propTypes2.default.string\n} : {};\nFormControlLabel.contextTypes = {\n  muiFormControl: _propTypes2.default.object\n};\nexports.default = (0, _withStyles2.default)(styles, {\n  name: 'MuiFormControlLabel'\n})(FormControlLabel);","map":null,"metadata":{},"sourceType":"script"}